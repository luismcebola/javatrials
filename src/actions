#PB0522
    action522() {
        decimal temp = -1;
        decimal pi = 0;
        integer count=0;
        while (((pi - temp) > 0.00025) || ((temp - pi) > 0.00025)){
            temp=pi;
            if (count % 2 == 0){
                pi=pi+1.0/ (2.0 * count + 1.0);
            } else {
                pi = pi - 1.0 / (2.0 * count + 1.0);
            }
            count=count+1;
        }
        pi=4*pi;
        return pi;
    }
Java:
public class Main {
    public static void main(String[] args) {
        double temp = -1, pi = 0;
        int count=0;
        while (((pi - temp) > 0.00025) || ((temp - pi) > 0.00025)){
            temp=pi;
            if (count % 2 == 0){
                pi=pi+1.0/ (2.0 * count + 1.0);
            } else {
                pi = pi - 1.0 / (2.0 * count + 1.0);
            }
            count=count+1;
        }
        pi=4*pi;
        System.out.println(pi);
    }
}

#PB0505
    action505(integer year) {
        integer next_many = 1;
        integer count = 0;
        str text;
        while (count != next_many){
            year = year + 1;
            if ((year % 400 == 0)
                    || (year % 4 == 0 && year % 100 != 0)) {
                count=count+1;
                text=text + year
            }
        }
        return text
    }
Java:
public class Main {
    public static void main(String[] args) {
        int year = 2099;
        int next_many = 1;
        int count = 0;
        while (count != next_many){
            year = year + 1;
            if ((year % 400 == 0)
                    || (year % 4 == 0 && year % 100 != 0)) {
                count=count+1;
                System.out.println(year);
            }
        }
    }
}


PB613
action613(integer a){
    integer Number=a;
    integer var=0;
    str text="";
    While(var<= Number){
        If(cond3(var)==0 && cond7(var)==0){
            t=t+" " + var;}
        var=var+1;}
Return t
     }

action6131(integer a)
boolean cond3(integer x)=If (mod(x,3)==0)
boolean cond7(integer x)=If (mod(x,10)==7)


ite|number|count|
1   6       0
2   7       1
3   8       2
4   9       3
5   10      4


ite|Mby2|number|count
1   -     20    0
2   40    40    1
3   80    80    2
4   160   160   3
5   -       -   3


actiontest(integer list a, integer list b){

integer sa=lsum(a);
integer sb=lsum(b);
integer n;

if(sa>=sb){
    n=findmax(b);
    }else{n=findmax(a);}
return n
}


lsum(integer list a){

integer s1;
for(i=0, i<a.length, i=i+1){
    s1=s1+a.current}
return s1;
}


findmax(integer list a){

integer count=0;
integer max=a[0];

while (count<a.length){
    if(a.current>max){
        max=a.current};
    count=count+1;}
return max
}



it|      a      |     b        |lsum(a)|lsum(b)|   findmax   |count|max|n
1   1,2,3          5,8            6       -          -          -   -   -
2   1,2,3          5,8            6       13    if->findmax(b)  0   5   0
3   1,2,3          5,8            6       13    if->findmax(b)  1   8   0
3   1,2,3          5,8            6       13          8         1   8   8




701

Ct(decimal Num1, decimal list ArrayOfNumbers){
    integer count=0;
    for(integer i=0,i<ArrayOfNumbers.length,i=i+1){
        If(ArrayOfNumbers[i]==Num1){
            count=count+1;}
    }
    return count
}


702

Ct(decimal Num1, decimal list ArrayOfNumbers){
    integer count=0;
    foreach Current in ArrayOfNumbers{
        If(Current==Num1){
            count=count+1;}
    }
    return count
}

703




#PB0704
NumberOfTimes(integer list ArrayOfIntegers){
   
    integer l=fmax(ArrayOfIntegers);
    integer list resultlist;
    for(integer i=0,i<l+1,i=i+1){
        resultlist=ListAppend(resultlist,ntimes(i,ArrayOfIntegers));
    }
}
fmax(integer list a){

integer count=0;
integer max=a[0];

while (count<a.length){
    if(a.current>max){
        max=a.current};
    count=count+1;}
return max
}
ntimes(integer n, integer list ArrayOfIntegers){

    integer count=0;
    for(integer i=0,i<ArrayOfIntegers.length,i=i+1){
        If(ArrayOfNumbers[i]==n){
            count=count+1;}
    }
    return count
}
Java:
import java.util.Arrays;
public class Main {
    public static void main(String[] args) {
        int[] X = {1, 10, 4, 3, 2, 5, 4, 4, 3, 3, 1};
        int l = fmax(X);
        int[] resultlist = new int [l+1];
        for (int i = 0; i < l+1; i = i + 1) {
            resultlist[i] = ntimes(i, X);
        }
        System.out.println(Arrays.toString(resultlist));
    }

    public static int fmax(int[] a) {
        int count = 0;
        int max = a[0];
        while (a.length > count) {
            if (a[count] > max) {
                max = a[count];
            }
            count = count + 1;
        }
        return max;
    }

    public static int ntimes(int n, int[] a) {
        int count = 0;
        for (int i = 0; i < a.length; i = i + 1) {
            if (a[i] == n) {
                count = count + 1;
            }
        }
        return count;
    }
}



#PB0803
        Sum(integer list X){
            integer sum=0;
            for(integer i=0;i<X.length;i=i+1){
                sum=sum+X[i];
            }
            return sum;
        }
        RecursionSum(integer list X, integer n){
            integer sum;
            if (n = 0) { //stop condition
                sum=X[n];
                return sum;
            }
            else { // recursion logic
                sum=X[n]+RecursionSum(X,n-1);
                return sum;
            }
        }



#PB0901
fword(str list words){
    integer pos=-1;
    for(integer i=0,i<words.length,i=i+1){
        if(words[i]=="Jackpot"){
            pos=i;
            return pos;}
    }
}
Java:
public class Main {
    public static void main(String[] args) {
        String[] X={"er", "trrtw","wer","er","Jackpot","se","vsdf","wer"};
        int pos=-1;
        for(int i=0; i < X.length;i=i+1) {
            if (X[i] == "Jackpot") {
                pos = i;
            }
        }
        System.out.println(pos);
    }
}

902
fword(str list words){
    
    integer xi=0;
    integer xf=words.length-1;
    integer xm=(xf+xi)/2;
    str t="Not found!";

        while(words[xm] != "Mary Anna" and xi<xf){
             if (words[xm] > "Mary Anna"){
                    xf=xm-1;
                } else{
                    xi=xm+1; 
                } ;
             xm=(xf+xi)/2;
        };
    if(xf<xi){
         return t;};
    return xm
} ;



PB1001
BubbleSort
Bbsort(Xtype list X){
    
    Xtype list Xsorted=X;
    boolean sorted=1;
    Xtype Xtemp;
    for(integer i=X.length-1,i>0,i=i-1){
        for(integer j=i,j>0,j=j+1){
            if(X[j-1]>X[j]){
                Xtemp=X[j];
                X[j]=X[j-1];
                X[j-1]=Xtemp;
                sorted=0;
            };
        if(sorted==1){
            Xsorted=X;      
            return Xsorted;
            };
        };
    Xsorted=X;      
    return Xsorted;};
    };
}




PB1003
SelectionSort(whatevertype list X){

    for(integer i=0,i<X.length-1,i=i+1){
        integer list Xtemp=X[i];
        integer pos=i;
        for(integer j=i,j<X.length-1,j=j+1){
            if(X[j]<Xtemp){
                Xtemp=X[j];
                pos=j;
              };
            X[pos]=X[i];
            X[i]=Xtemp;
    };
    return X;
};




GetSecondGreatest(decimal X){
    decimal max=X[0];
    decimal max2=X[0];
    If(X.length<2){
        Return -1;
    };
    For(integer i=1; i< X.length; i=i+1){
        If(X[i] > max) {
            max2 = max;
            max = X[i];
        }
        ;
        Else If (X[i] > max2) {
            max2 = X[i];
        };
    };
    Return max2;
}


RD0201
INSERT INTO Region VALUES(6,'Faraway');

RD0202
INSERT INTO Products (ProductName, SupplierID, CategoryID) VALUES ('BeachBall', 1, 2);

RD0503
SELECT MAX([UnitPrice]) AS MaxUnitPrice
FROM {Products}

RD0505
SELECT AVG([UnitPrice]) AS AVGUnitPrice
FROM {Products}

RD0506
SELECT SUM([UnitsInStock]) AS SumUnitsInStock
FROM {Products}

RD0508
SELECT MAX([UnitPrice]), MIN([UnitPrice]), AVG([UnitPrice]), SUM([UnitsInStock]), COUNT(1)
FROM {Products}
WHERE [UnitsInStock] > 0

RD0515
SELECT COUNT (DISTINCT [ContactTitle])
    FROM {Customers}


SELECT COUNT (DISTINCT [ContactTitle]), DISTINCT [ContactTitle]
    GROUP BY COUNT({Customers}.[Country])
    FROM {Customers}

RD807
    SELECT Name
    FROM Teachers
        WHERE NOT EXISTS (SELECT TeachersId FROM Class
            WHERE Teachers.Id = TeachersId)

RD804




PB510
printer(integer n){
        int n;
        int m;
        str text;
        if (n == 0) {
            return 0;
        }
        for (int i = 0; i < Abs(n); i = i + 1) {
            if (n < 0) {
                m = n + i;
                text = text + m;
            }
            ;
            if (n > 0) {
                m = i + 1;
                text = text + m;
            };
        };
    };

PB510 com while
    printer(integer n){
        int n;
        int m=n;
        str text;
        if (n == 0) {
            return 0;
        };
        While(m=!0){
            if (n < 0) {
                m = m + 1;
                text = text + m;
            };
            if (n < 0) {
                m = m - 1;
                text = text + m;
            };
        };
    };


//Ordering double list
import java.util.Arrays;
public class Main {
    public static void main(String[] args) {
        int i,j;
        double key;
        double[] X={0,1.4,10,4,7,6,1000, 9.3,6.4};
        for (i=0;i< X.length;i++){
            key=X[i];
            j=i-1;
            while (j>=0 && X[j]>key){
                X[j+1]=X[j];
                j=j-1;
            }
            X[j+1]=key;
        }
        System.out.println(Arrays.toString(X));
    }
}

//Square double Recursive
public class Main {
    public static void main(String[] args) {
        double result = sq(3.4);
        System.out.println(result);
    }
    public static double sq(double k) {
        if (k > 1) {
            return sq(k-1) + k + k - 1;
        } else {
            return k*k;
        }
    }
}
